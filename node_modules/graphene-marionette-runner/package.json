{
  "name": "graphene-marionette-runner",
  "version": "0.0.5",
  "author": {
    "name": "The Graphene Team"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/KevinGrandon/graphene-marionette-runner.git"
  },
  "description": "Scripts to run marionette tests on top of graphene",
  "license": "MIT",
  "bin": {
    "marionette-mocha": "./bin/marionette-mocha",
    "apply-manifest": "./bin/apply-manifest"
  },
  "main": "index.js",
  "dependencies": {
    "argparse": "^0.1.15",
    "array-difference": "0.0.1",
    "commander": "~1.3",
    "debug": "*",
    "empty-port": "~0.0.1",
    "escape-string-regexp": "^1.0.2",
    "indent-string": "^1.2.0",
    "intersect": "~0.0.3",
    "lodash": "3.1.0",
    "marionette-js-logger": "0.2.1",
    "marionette-profile-builder": "0.0.3",
    "mkdirp": "^0.5.0",
    "mocha": "^2.2.5",
    "mocha-json-proxy": "~0.0.2",
    "mozilla-runner": "^0.5.0",
    "mz": "^1.1.0",
    "object-assign": "^1.0.0",
    "promise": "^6.0.1",
    "superagent": "^0.21.0",
    "superagent-promise": "^0.2.0",
    "uuid": "^2.0.1",
    "yargs": "^1.3.2"
  },
  "peerDependencies": {
    "marionette-client": "1.7.x"
  },
  "readme": "graphene-marionette-runner\n====================\n\nAn forked version of marionette-js-runner, modified to run tests on top of the graphene runtime.\n\n![Architecture diagram](http://i.imgur.com/VseTpDF.png)\n\nThis project is the sum of a number of other smaller more focused projects:\n  - [marionette-js-client](https://github.com/mozilla-b2g/marionette_js_client)\n  - [marionette-profile-builder](https://github.com/mozilla-b2g/marionette-profile-builder)\n  - [marionette-b2gdesktop-host](https://github.com/mozilla-b2g/marionette-b2gdesktop-host)\n\nSee [MDN](https://developer.mozilla.org/en-US/docs/Marionette/Marionette_JavaScript_Tools)\nfor more details about the intent of the project and where it's going.\n\n## Installing / Invoking tests\n\n\nadd marionette-js-runner and marionette-js-client to your project\n\n```sh\nnpm install --save-dev marionette-client marionette-js-runner\n```\n\nInvoke a marionette-mocha test\n\n```sh\n# from the root of your project (where your package.json is)\n./node_modules/.bin/marionette-mocha path/to/test.js\n```\n\nSee `./node_modules/.bin/marionette-mocha --help` for more docs on what it can do.\n\nLike mocha there is support for an \"opts\" file which will be\nloaded with the specific configuration for your project.\n\nThe file must be called \"marionette-mocha.opts\" and live in one of the\nfollowing locations:\n\n- test/\n- tests/\n- root of your project\n\nEach location will be loaded if found. Any option that can be\npassed into `marionette-mocha` (see --help) can be placed in this file.\n\n## Exposed APIs for writing marionette tests\n\n- [`marionette` (suite/describe like a api)](#marionette-suitedescribe-like-a-api)\n- [`marionette.client` (marionette client interface)](#marionetteclient-marionette-client-interface)\n- [`marionette.plugin` (plugin exposure/setup api)](#marionetteplugin-plugin-exposuresetup-api)\n\n## `marionette` (suite/describe like a api)\n\nThe marionette function is a wrapper around mocha's suite/describe blocks.\nThey expose an additional field (a filter) which is an object which describes under which\nconditions a test may execute.\n\nThe filter is matched vs metadata from the particular host (like firefox / b2g-desktop ) the test is running on.\n[Example host metadata](https://github.com/mozilla-b2g/marionette-b2gdesktop-host/blob/105552c46f0e384627bce19b242f2de94e06c633/index.js#L33)\n\n```js\n// this always runs\nmarionette('I always run', function() {\n});\n\n// only runs on firefox\nmarionette('firefox only', { host: 'firefox' }, function() {\n  test('only executed when host is firefox');\n});\n\n// executed when firefox is the host OR b2g-desktop\nmarionette('b2g desktop or firefox', { host: ['firefox', 'b2g-desktop'] }, function() {\n\n});\n```\n\n## `marionette.client` (marionette client interface)\n\nCreating a client is easy. Each test will run in a completely clean state ( with its own profile ).\nThe default client has no profile options and is sync.\n\n```js\nmarionette('github.com', function() {\n  var github = 'http://github.com';\n\n  // no options are required by default.\n  var client = marionette.client();\n\n  setup(function() {\n    client.goUrl(github);\n  });\n\n  test('logging into github', function() {\n    // do stuff with the client\n  });\n})\n```\n\nClients can be configured to have custom profiles. For instance, let's say you want to test a packaged app with specialized settings...\n\n```js\nmarionette('my custom app', function() {\n  var client = marionette.client({\n    profile: {\n      // see for options https://github.com/mozilla-b2g/mozilla-profile-builder\n      prefs: {\n        // see about:config too\n        'devtools.inspector.markupPreview': true\n      },\n      settings: {\n        // turn off lockscreen\n        \"lockscreen.locked\": false\n      },\n\n      // install a packaged app\n      apps: {\n        'domain-name-of-my-amazing-app.com': '/path/to/app'\n      }\n    }\n  });\n\n  // ... do stuff with your client\n})\n```\n\nClients have different \"driver\" types which determine how they connect with the marionette server.\nTypically you don't need to think about this, but it is important to note that the default driver is synchronous\nwhich means each marionette operation blocks (you can't really run servers in the same process).\n\n```js\nmarionette('be async man', function() {\n  var client = marionette.client({\n    driver: require('marionette-client').Drivers.Tcp\n  });\n\n  // imagine this is used to create an http server in this process\n  var http = require('http');\n\n\n  test('talk to the server in this process', function(done) {\n    client.goUrl('http://localhost:port', function(err) {\n      if (err) return done(err);\n\n      // perform some other actions..\n      done();\n    });\n  });\n})\n```\n\nMultiple clients can also be created.\n\n```js\nmarionette('I like sending emails to myself', function() {\n  var clientA = marionette.client();\n  var clientB = marionette.client();\n\n  // do something fancy like send an email from one client to another\n});\n```\n\n## `marionette.plugin` (plugin exposure/setup api)\n\nOne of the features of the client is extending its functionality without modifying the base code.\nFor example if you wanted to extend the client to\n[launch apps](https://github.com/mozilla-b2g/marionette-apps) this can be done by exposing a new plugin.\n\n\n```js\n// the particular case is based on: https://github.com/mozilla-b2g/marionette-apps\n\n// expose something at the global level to all tests (you can do this from a helper file too)\nmarionette.plugin('apps', require('marionette-apps'));\n\nmarionette('my local test', function() {\n  var client = marionette.client();\n  var origin = 'app://calendar.gaiamobile.org';\n\n  // this plugin only exists inside the current \"marionette(function() { ... })\" block\n  marionette.plugin('myplugin', function(client) {\n    return {\n      doStuff: function() {}\n    };\n  });\n\n  setup(function() {\n    client.apps.launch(origin);\n    client.apps.switchToApp(origin);\n  });\n\n  test('that calendar works', function() {\n    // do some calendar testing inside of its frame\n  });\n\n  test('myplugin', function() {\n    // leverage your custom plugin\n    client.myplugin.doStuff();\n  });\n})\n\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/KevinGrandon/graphene-marionette-runner/issues"
  },
  "homepage": "https://github.com/KevinGrandon/graphene-marionette-runner#readme",
  "_id": "graphene-marionette-runner@0.0.5",
  "_shasum": "7a347aa07ca8951736e52632053e127e7052351b",
  "_resolved": "https://registry.npmjs.org/graphene-marionette-runner/-/graphene-marionette-runner-0.0.5.tgz",
  "_from": "https://registry.npmjs.org/graphene-marionette-runner/-/graphene-marionette-runner-0.0.5.tgz"
}
